Instructions de contrôle du flux : for, if, else, switch et defer
Apprenez à contrôler le flux de votre code avec les conditionnels, boucles, commutateurs et defers.

Les auteurs de Go
https://golang.org

* For

Go a une seule structure de boucle, la  boucle `for`.

La boucle de base `for` a trois composantes séparées par des points-virgules:

- La déclaration d'initialisation: exécuté avant la première itération
- L'expression de condition: évalués avant chaque itération
- La déclaration d'aboutissement : exécuté à la fin de chaque itération

La déclaration d'initialisation sera souvent une déclaration de variable court et les
variables ainssi déclarées sont visibles que dans le cadre de la déclaration
`for`.

l'Itération de la boucle sera arrêter une fois que la condition booléenne évalue à `false`.

*note*:* Contrairement à d'autres langages comme C, Java ou Javascript il n'y a pas de parenthèses
entourant les trois composantes de la déclaration `for` et les accolades `{`}` sont
toujours exigé.

.play flowcontrol/for.go

* For continué

La déclaration d'initialisation et d'aboutissement sont facultatifs.

.play flowcontrol/for-continued.go

* For est le « while » de Go

À ce stade, vous pouvez oublier les points-virgules : le `while` de C est orthographié `for` en Go.

.play flowcontrol/for-is-gos-while.go

* Infini

Si vous omettez la condition de la boucle, elle boucle à l'infini, donc une boucle infinie s'écrit concisément.

.play flowcontrol/forever.go

* If

La déclaration `if` de Go est comme la boucle `for`; l'expression n'a pas besoin d'être
entouré par des parenthèses `(`)` mais les accolades `{`}` sont obligatoires.

.play flowcontrol/if.go

* If avec une déclaration courte

Comme `for`, l'instruction `if`  peut commencer par une brève déclaration à exécuter avant la condition.

Les variables déclarées dans la déclaration ont seulement une portée jusqu'à la fin de l' `if`.

(Essayez d'utiliser `v` lors de la dernière instruction `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If et else

Les variables déclarées à l'intérieur d'un `if` de courte déclaration sont également disponibles à l'intérieur des blocs `else`.

(Les deux appels à `pow` sont exécutées et reviennent avant que l'appel de `main` à `fmt.Println` commence.)

.play flowcontrol/if-and-else.go

* Exercice : Les boucles et les fonctions

Une façon simple de jouer avec des fonctions et des boucles est de mettre en œuvre la fonction de la racine carrée par la méthode de Newton.

Dans ce cas, la méthode de Newton consiste à approcher `Sqrt(x)` en choisissant un point _z_ de départ, puis en répétant :

.image /content/img/newton.png

Pour commencer, il suffit de répéter ce calcul 10 fois et de voir à quel point vous êtes proche de la réponse pour différentes valeurs (1, 2, 3, ...).

Ensuite, changer la condition de la boucle d'arrêter, une fois que la valeur a fini de changer (ou seulement des changements par un très petit delta). Voir si c'est plus ou moins d'itérations. Comment êtes-vous proche de la [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] ?

Astuce : pour déclarer et initialiser une valeur en virgule flottante, employez la syntaxe à virgule flottante ou utilisez une conversion :

	z := float64(1)
	z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* Commutateur (Switch)

Vous saviez probablement ce à quoi `switch` allait ressembler.

Un cas est terminé automatiquement, sauf s'il fini par une déclaration `fallthrough`.

.play flowcontrol/switch.go

* Ordre d'évaluation du Commutateur

Le commutateur évalue les cas de haut en bas, en s'arrêtant quand un cas correspond.

(Par exemple,

	switch i {
	case 0:
	case f():
	}

n'appelle pas `f` si `i==0`.)

#appengine: *note*:* l'Heure dans la playground de Go semble toujours commencer à
#appengine: 2009-11-10 23:00:00 UTC, une valeur dont la signification est laissée en
#appengine: exercice pour le lecteur.

.play flowcontrol/switch-evaluation-order.go

* Commutateur sans condition

Un commutateur sans condition a la même signification que `switch true`.

Cette construction permet d'écrire élégamment de longues chaînes `if`-`then`-`else`.

.play flowcontrol/switch-with-no-condition.go

* Defer

Une déclaration `defer` reporte l'exécution d'une fonction jusqu'à ce que la fonction environnante
retourne.

Les arguments de l'appel différé sont évalués immédiatement, mais l'appel de fonction
n'est pas exécuté jusqu'à ce que la fonction environnante retourne.

.play flowcontrol/defer.go

* Defers empilés

Les appels de fonction différés sont poussés sur une pile. Quand une fonction retourne, ses
appels différés sont exécutées dans l'ordre dernier entré, premier sorti.

Pour en savoir plus sur les déclarations `defer` lire cet
[[https://blog.golang.org/defer-panic-and-recover][article de blog]].

.play flowcontrol/defer-multi.go

* Félicitations !

Vous avez terminé cette leçon !

Vous pouvez revenir à la liste des [[/list][modules]] pour trouver ce qu'il faut apprendre à côté, ou continuer avec la [[javascript:click('.next-page')][leçon suivante]].
