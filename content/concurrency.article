Concomitance
Go offre des primitives de simultanéité dans le cadre du langage de base. Cette leçon les présentent et donne quelques exemples sur la façon de les utilisés pour mettre en œuvre différents modèles de concurrence.

Les auteurs de Go
https://golang.org

* Goroutines

Une _goroutine_ est un processus léger géré par le « Go runtime ».

	go f(x, y, z)

démarre une nouvelle goroutine exécutant

	f(x, y, z)

L'évaluation de `f`, `x`, `y` et `z` arrive dans la goroutine actuelle et l'exécution de `f` arrive dans la nouvelle goroutine.

Les goroutines s'exécutent dans le même espace d'adressage, de sorte que les accès à la mémoire partagée doivent être synchronisés. Le paquet [[https://golang.org/pkg/sync/][`sync`]] fournit des primitives utiles, bien que vous n'aurez pas beaucoup besoin d'y Accéder car Go a d'autres primitives. (Voir la diapositive suivante.)

.play concurrency/goroutines.go

* Canaux (Channels)

Les canaux sont des conduits typés à travers lesquels vous pouvez envoyer et recevoir des valeurs avec l'opérateur de canal, `<-`.

	ch <- v    // Envoyer v sur le canal ch.
	v := <-ch  // Recevoir de ch, et
	           // attribuer une valeur à v.

(Le flux de données vas dans le sens de la flèche.)

Comme les cartes et les tranches, les canaux doivent être créés avant l'utilisation :

	ch := make(chan int)

Par défaut, l'envoi et la réception bloque jusqu'à ce que l'autre côté soit prêt. Cela permet de synchroniser les goroutines sans verrous explicites ou variables de condition.

.play concurrency/channels.go

* Les canaux à mémoire tampon

Les canaux peuvent être _buffered_. Fournir la longueur du tampon comme le second argument de `make` pour initialiser un canal à mémoire tampon :

	ch := make(chan int, 100)

L'envoi à un canal à mémoire tampon bloque uniquement lorsque le tampon est plein. La réception bloque lorsque le tampon est vide.

Modifiez l'exemple pour trop remplir la mémoire tampon et voir ce qui se passe.

.play concurrency/buffered-channels.go

* Gamme (Range) et Fermeture (Close)

Un expéditeur peut `close` un canal pour indiquer qu'il n'y a plus de valeurs qui seront envoyés. Les récepteurs peuvent vérifier si un canal a été fermée par l'attribution d'un deuxième paramètre à l'expression de réception : après

	v, ok := <-ch

`ok` est `false` si il n'y a plus de valeurs à recevoir et le canal est fermé.

La boucle `for`i`:=`range`c` reçoit les valeurs du canal à plusieurs reprises jusqu'à ce qu'il soit fermé.

*Note*:* seul l'expéditeur doit fermer un canal, jamais le récepteur. L'envoi sur un canal fermé provoque une panique.

*Autre*note*:* les canaux ne sont pas comme les fichiers, vous n'avez généralement pas besoin de les fermer. La fermeture n'est nécessaire que lorsque le récepteur doit être informé qu'il n'y a plus de valeurs à venir, comme mettre fin à la boucle d'un `range`.

.play concurrency/range-and-close.go

* Sélectionner (Select)

La déclaration `select` permet à une goroutine d'attendre sur plusieurs opérations de communication.

Un `select` bloque jusqu'à ce que l'un de ses cas puisse s'exécuter, puis il l'exécute. Il en choisit un au hasard si plusieurs sont prêts.

.play concurrency/select.go

* La sélection par défaut

Le cas `default` dans un `select` est exécuté si aucun autre cas n'est prêt.

Utiliser un cas `default` pour essayer d'envoyer ou recevoir sans blocage :

	select {
	case i := <-c:
		// utiliser i
	default:
		// recevoir de c bloquerait
	}

.play concurrency/default-selection.go

* Exercice : arbres binaires équivalents

Il peut y avoir plusieurs arbres binaires avec la même séquence de valeurs stockées dans les feuilles. Par exemple, voici deux arbres binaires stockant la séquence 1, 1, 2, 3, 5, 8, 13.

.image /content/img/tree.png

Une fonction pour vérifier si deux arbres binaires stockent la même séquence est assez complexe dans la plupart des languages. Nous utiliserons la concurrence et les canaux de Go pour écrire une solution simple.

Cet exemple utilise le paquet `tree`, qui définit le type :

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}


Continuer la description sur [[javascript:click('.next-page')][la page suivante]].

* Exercice : arbres binaires équivalents

*1.* Mettre en œuvre la fonction `Walk`.

*2.* Test de la fonction `Walk`.

La fonction `tree.New(k)` construit un arbre binaire aléatoire structurée contenant les valeurs de `k`, `2k`, `3k`, ..., `10k`.

Créez un nouveau canal `ch` et envoyer le marcheur :

	go Walk(tree.New(1), ch)

Ensuite, lire et imprimer les 10 valeurs du canal. Il devrait être les numéros 1, 2, 3, ..., 10.

*3.* Mettre en œuvre la fonction `Same` en utilisant `Walk` pour déterminer si `t1` et `t2` stockent les mêmes valeurs.

*4.* Test de la fonction `Same`.

`Same(tree.New(1),`tree.New(1))` doit retourner true, et `Same(tree.New(1),`tree.New(2))` doit retourner false.

La documentation pour `Tree` ce trouve [[https://godoc.org/golang.org/x/tour/tree#Tree][ici]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Nous avons vu comment les canaux sont parfaits pour la communication entre les goroutines.

Mais que faire si on n'a pas besoin de communication? Que faire si nous voulons juste nous assurer que
un goroutine peut accéder à une variable à la fois pour éviter les conflits?

Ce concept est appelé _exclusion_mutuelle_, et le nom classique pour la structure de données qui fournit cela est _mutex_.

La bibliothèque standard de Go offre l'exclusion mutuelle avec
[[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] et ses deux méthodes:

- `Lock`
- `Unlock`

Nous pouvons définir un bloc de code à exécuter en exclusion mutuelle en l'entourant
avec un appel à `Unlock` et `Lock` comme indiqué sur la méthode `Inc`.

Nous pouvons également utiliser `defer` pour garantir que le mutex sera débloqué comme dans la méthode `value`.

.play concurrency/mutex-counter.go

* Exercice : Web Crawler

Dans cet exercice, vous allez utiliser les fonctionnalités de simultanéité de Go pour paralléliser un robot web.

Modifier la fonction `Crawl` pour ramener des URLs en parallèle sans aller chercher deux fois la même URL.

*Note*:* vous pouvez garder un cache des URL qui ont été récupérées avec une carte, mais les cartes seules ne sont pas
sûres pour une utilisation simultanée !

.play concurrency/exercise-web-crawler.go

* Où aller à partir d'ici ...

#appengine: Vous pouvez commencer par
#appengine: [[https://golang.org/dl/][installer Go]].

#appengine: Une fois que vous avez installé Go, la
La
[[https://golang.org/doc/][Documentation Go]] est un endroit idéal pour
#appengine: continuer.
commencer.
Elle contient des références, des tutoriels, des vidéos et bien plus encore.

Pour apprendre à organiser et à travailler avec le code Go, regarder [[https://www.youtube.com/watch?v=XCsL89YtqCs][ce screencast]] ou lire [[https://golang.org/doc/code.html][Comment écrire du code Go]].

Si vous avez besoin d'aide avec la bibliothèque standard, voir la [[https://golang.org/pkg/][référence des paquets]]. Pour de l'aide avec le langage lui-même, vous pourriez être surpris de trouver la [[https://golang.org/ref/spec][Spec du Langage]] tout à fait lisible.

Pour explorer davantage le modèle de la concomitance de Go, regarder
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Patterns de simultanéité de Go]]
([[https://talks.golang.org/2012/concurrency.slide][diapositives]])
,
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Patterns avancée de la simultanéité de Go]]
([[https://talks.golang.org/2013/advconc.slide][diapositives]])
et lire le codewalk
[[https://golang.org/doc/codewalk/sharemem/][Partager la Mémoire en communiquant]].


Pour commencer l'écriture d'applications web, regarder
[[https://vimeo.com/53221558][Un environnement de programmation simple]]
([[https://talks.golang.org/2012/simple.slide][diapositives]])
 et lire le tutoriel
[[https://golang.org/doc/articles/wiki/][Écrire des applications Web]].

Le codewalk [[https://golang.org/doc/codewalk/functions/][Fonctions de première classe dans Go]] donne une perspective intéressante sur les types de fonction de Go.

Le [[https://blog.golang.org/][Go Blog]] a une grande archive d'articles informatifs en Go.

Visitez [[https://golang.org][golang.org]] pour plus.
