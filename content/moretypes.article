Plus de types: structs, slices, et maps. 
Apprenez à définir des types basés sur ceux qui existent déjà: cette leçon couvre les structures, tableaux (arrays), tranches et cartes.

Les auteurs de Go
http://golang.org

* Pointeurs

Go comporte des pointeurs.
Un pointeur contient l'adresse mémoire d'une variable.

Le type `*T` est un pointeur vers une valeur de `T`. Sa valeur zéro est `nil`.

	var p *int

L'opérateur `&` génère un pointeur vers son opérande.

	i := 42
	p = &i

L'opérateur `*` dénote la valeur sous-jacente du pointeur.

	fmt.Println(*p) // lire i par le pointeur p
	*p = 21         // définir i par le pointeur p

Ceci est connu en tant que "déréférencement" ou "indirecting".

Contrairement à C, Go n'a aucune arithmétique de pointeur.

.play moretypes/pointers.go

* Structures

Une `struct` est une collection de champs.

(Et une déclaration de `type` fait ce à quoi vous vous attendriez.)

.play moretypes/structs.go

* Champs struct

les champs de la structure sont accessibles à l'aide d'un point.

.play moretypes/struct-fields.go

* Les pointeurs vers des structs

Les champs struct peuvent être accessibles via un pointeur de struct.

L'indirection via le pointeur est transparente.

.play moretypes/struct-pointers.go

* Struct littéraux

Une structure littéral dénote une valeur de structure nouvellement allouée en énumérant les valeurs de ses champs.

Vous pouvez lister seulement un sous-ensemble de champs en utilisant la syntaxe `Nom:`. (Et l'ordre des champs nommés n'est pas pertinent.)

Le préfixe spécial `&` construit un pointeur vers la valeur struct.

.play moretypes/struct-literals.go

* Tableaux (Arrays)

Le type `[n]T` est un tableau de `n` ayant des valeurs de type `T`.

L'expression

	var a [10]int

déclare une variable `a` comme un tableau de dix entiers.

La longueur d'un tableau fait partie de son type, de sorte que les tableaux ne peuvent pas être redimensionnées.
Cela semble limitatif, mais ne vous inquiétez pas;
Go offre un moyen pratique de travailler avec des tableaux.
	
.play moretypes/array.go

* Tranches (Slices)

Une tranche(Slice) pointe vers un tableau de valeurs et possède une longueur.

`[]T` est une tranche avec des éléments de type `T`.

.play moretypes/slices.go

* Tranches redécoupées

Les tranches peuvent être redécoupées, créant ainsi une nouvelle tranche qui pointe vers le même tableau.

L'expression

	s[lo:hi]

récupère les éléments de la tranche de `lo` à `hi-1` inclus. Ainsi

	s[lo:lo]

est vide et

	s[lo:lo+1]

possède un élément.

.play moretypes/slicing-slices.go

* Créer des Tranches

Les Slices peuvent être créées avec la fonction  `make`. Cela fonctionne en allouant un tableau vide et en retournant une slice qui référence ce tableau :

	a := make([]int, 5)  // len(a)=5

Pour spécifier une capacité, passer un troisième argument à `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go

* Tranches nulles

La valeur nulle d'une tranche est `nil`.

Une tranche possède une longueur et une capacité de zéro.

.play moretypes/nil-slices.go

* Ajout d'éléments à une tranche 

Il est courant d'ajouter de nouveaux éléments à une tranche, et ainsi Go offre une fonction intégrée
`append`. La [[http://golang.org/pkg/builtin/#append][documentation]] 
du paquet intégré décrit `append`. 

	func append(s []T, vs ...T) []T

Le premier paramètre `s` de `append` est une tranche de type `T`, et le reste sont des 
valeurs `T` à ajouter à la tranche.

La valeur résultante de `append` est une tranche contenant tous les éléments de la tranche original
et les valeurs fournis. 

Si le tableau de support de `s` est trop petit pour contenir toutes les valeurs données un plus gros 
tableau sera alloué. La tranche retourné pointera vers le tableau nouvellement
allouée.

(Pour en apprendre plus sur les tranches, lire l'article [[http://golang.org/doc/articles/slices_usage_and_internals.html][Tranches: utilisation et fonctionnement interne]].)

.play moretypes/append.go

* Gamme (Range)

La forme `range` de la boucle `for` effectue une itération sur une tranche ou une carte.

.play moretypes/range.go

* Gamme poursuivi

Vous pouvez sauter l'indice ou la valeur en attribuant à `_`.

Si vous ne souhaitez que l'indice, déposez la ", value" entièrement.

.play moretypes/range-continued.go

* Exercice: Tranches

Mettre en œuvre `Pic`. Elle doit retourner une tranche de longueur `dy`, dont chaque élément est une tranche de `dx` d'entiers non signés 8 bits. Lorsque vous exécutez le programme, il affiche votre image, l'interprétation des nombres en  valeurs de niveaux de gris (enfin, Bluescale).

Le choix de l'image est libre. Les Fonctions intéressantes incluent `(x+y)/2`, `x*y` and `x^y` (pour calculer cette dernière fonction, utilisez [[http://golang.org/pkg/math/#Pow][`math.Pow`]]).

(Vous devez utiliser une boucle pour allouer chacun des `[]uint8` à l'intérieur des `[][]uint8`).

(Utiliser `uint8(intValue)` pour convertir entre les types.)

.play moretypes/exercise-slices.go

* Cartes (Maps)

Une carte associe clés et valeurs.

Les cartes doivent être créés avec `make` (pas `new`) avant utilisation; la carte `nil` est vide et ne peut pas être assigné.

.play moretypes/maps.go

* Carte littéraux (Map literals)

Carte littéraux sont comme des littéraux de struct, mais les clés sont nécessaires.

.play moretypes/map-literals.go

* Carte littéraux continué

Si le type de haut-niveau est juste un nom de type, vous pouvez l'omettre des éléments du littéral.

.play moretypes/map-literals-continued.go

* mutation de Cartes (Mutating Maps)

Insérer ou mettre à jour un élément de carte `m`:

	m[key] = elem

Récupérer un élément:

	elem = m[key]

Supprimer un élément:

	delete(m, key)

Test qu'une clé est présente avec une affectation de deux valeurs:

	elem, ok = m[key]

Si `key` est dans `m`,`ok` est `true`. Sinon, `ok` est `false` et `elem` est la valeur zéro pour le type d'élément de la carte.

De même, lors de la lecture d'une carte, si la clé n'est pas présente, le résultat est la valeur zéro pour le type d'élément de la carte.

.play moretypes/mutating-maps.go

* Exercice: Cartes

Mettre en œuvre `WordCount`. Elle doit retourner une carte des comptes de chaque «mot» dans la chaîne `s`. La fonction `wc.Test` exécute une série de tests contre la fonction fournie et imprime le succès ou l'échec.

Vous trouverez peut-être [[http://golang.org/pkg/strings/#Fields][strings.Fields]] utile.

.play moretypes/exercise-maps.go

* Les valeurs de fonction

Les fonctions sont aussi des valeurs.

.play moretypes/function-values.go

* Fermetures de fonction (Closures)

Les fonctions de Go peuvent être des fermetures. Une fermeture  est une valeur de la fonction qui fait référence à des variables à partir de l'extérieur de son corps. La fonction peut accéder et assigner aux variables référencées, dans ce sens, la fonction est «lié» aux variables.

Par exemple, la fonction de `adder` renvoie une fermeture. Chaque fermeture est liée à sa propre variable `sum`.

.play moretypes/function-closures.go

* Exercice: fermeture Fibonacci

Ayons du plaisir avec les fonctions.

Mettre en œuvre une fonction `Fibonacci` qui renvoie une fonction (une fermeture) qui renvoie les nombres de Fibonacci successifs.

.play moretypes/exercise-fibonacci-closure.go


* Félicitations!

Vous avez terminé cette leçon!

Vous pouvez revenir à la liste des [[/list][modules]] pour trouver ce qu'il faut apprendre à côté, ou continuer avec la [[javascript:click('.next-page')][Leçon suivante]].
