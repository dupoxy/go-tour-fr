Paquets, variables, et fonctions.
Apprenez les éléments de base de tout programme Go.

Les auteurs de Go
https://golang.org

* Paquets

Chaque programme en Go est composé de paquets.

Les programmes commencent l'exécution dans le paquet `main`.

Ce programme utilise les paquets avec des chemins d'importation `"fmt"` et `"math/rand"`.

Par convention, le nom du paquet est le même que le dernier élément du chemin d'importation. Par exemple, le paquet `"math/rand"` comprend les fichiers qui commencent avec la déclaration `package rand`.

#appengine: *Note*:* L'environnement dans lequel ces programmes sont exécutés est
#appengine: déterministe, donc chaque fois que vous exécutez le programme d'exemple,
#appengine: `rand.Intn` retournera le même nombre.
#appengine:
#appengine: (Pour voir un autre nombre, initialiser le générateur de nombre. Voir [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].
#appengine: Le temps est constant dans ce terrain de jeu, vous devrez donc utiliser autre chose comme graine.)

.play basics/packages.go

* Importations

Ce code groupe les importations entre parenthèses en un import unique et « factorisé ».

Vous pouvez également écrire plusieurs déclarations d'importation, comme :

	import "fmt"
	import "math"

Mais c'est mieux au niveau du style d'utiliser la déclaration d'importation factorisée.

.play basics/imports.go

* Les identifiants exportés

En Go, un identifiant est exporté s'il commence par une majuscule.
Par exemple, `Pizza` est un identifiant exporté, tout comme `Pi`, qui est exporté
du paquet `math`.

`pizza` et `pi` ne commencent pas par une majuscule, ils ne sont donc pas exportés.

Lors de l'importation d'un paquet, vous pouvez seulement faire référence à ses identifiants exportés.
Tous les identifiants « non exportées » sont inaccessibles depuis l'extérieur du paquet.

Exécutez le code. Remarquez le message d'erreur.

Pour corriger l'erreur, renommez `math.pi` en `math.Pi` et essayez à nouveau.

.play basics/exported-names.go

* Fonctions

Une fonction peut prendre zéro ou plusieurs arguments.

Dans cet exemple, `add` prend deux paramètres de type `int`.

Notez que le type vient _après_ l'identifiant de la variable.

(Pour en apprendre plus et comprendre pourquoi les types sont comme ça, consulter l'[[https://blog.golang.org/gos-declaration-syntax][article sur la syntaxe de déclaration de Go]]).

.play basics/functions.go

* Fonctions (suite)

Lorsque deux ou plusieurs paramètres de fonction nommée consécutifs partagent un type, vous pouvez omettre le type de tous sauf le dernier.

Dans cet exemple, nous avons réduit

	x int, y int

en

	x, y int

.play basics/functions-continued.go

* Plusieurs résultats

Une fonction peut renvoyer un nombre quelconque de résultats.

Cette fonction `swap` retourne deux chaînes.

.play basics/multiple-results.go

* Résultats nommés

Les valeurs de retour de Go peuvent être nommées. Si c'est le cas, elles sont traitées comme des variables définies au début de la fonction.

Ces noms doivent être utilisés pour documenter la signification des valeurs de retour.

Une déclaration `return` sans arguments renvoie les valeurs de retour nommées. C'est ce qu'on appelle un retour « nu ».

Des déclarations de retour nus doivent être utilisées uniquement dans des fonctions courtes, comme dans l'exemple montré ici. Elles peuvent nuire à la lisibilité dans des fonctions plus longues.

.play basics/named-results.go

* Variables

L'instruction `var` déclare une liste de variables ; comme dans les listes d'arguments de fonction, le type est en dernier.

Une instruction `var` peut être au niveau du paquet ou au niveau de la fonction. On voit les deux dans cet exemple.

.play basics/variables.go

* Les variables avec initialisations

Une déclaration var peut inclure des initialisations, une par variable.

Si une initialisation est présente, le type peut être omis ; la variable prendra le type de l'initialisation.

.play basics/variables-with-initializers.go

* Déclaration de variables courtes

À l'intérieur d'une fonction, l'instruction `:=` d'affectation courte peut être utilisée à la place d'une déclaration `var` de type implicite.

En dehors d'une fonction, chaque instruction commence avec un mot-clé (`var`, `func`, et ainsi de suite) et la construction `:=` n'est pas disponible.

.play basics/short-variable-declarations.go

* Les types de base

Les types de base de Go sont

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias pour uint8

	rune // alias pour int32
	     // représente un "code point" Unicode

	float32 float64

	complex64 complex128

L'exemple montre des variables de plusieurs types,
et aussi que les variables de déclarations peuvent être « factorisées », en blocs,
comme les déclarations d'importation.

Les types `int`, `uint` et `uintptr` sont généralement d'une largeur de 32 bits sur les systèmes 32 bits et 64 bits de large sur les systèmes 64 bits.
Lorsque vous avez besoin d'une valeur entière, vous devez utiliser `int` sauf si vous avez une raison particulière d'utiliser un type entier de taille définie ou non signé.

.play basics/basic-types.go

* Les valeurs zéro

Les variables déclarées sans valeur initiale explicite reçoivent leur
_valeur_zéro_.

La valeur zéro est :

- `0` pour les types numériques ;
- `false` pour les types booléens ;
- `""` (la chaîne vide) pour les chaînes de caractères.

.play basics/zero.go

* Les conversions de type

L'expression `T(v)` convertit la valeur `v` au type `T`.

Quelques conversions numériques :

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Ou, plus simplement :

	i := 42
	f := float64(i)
	u := uint(f)

Contrairement au C, en Go l'affectation entre des éléments de type différent nécessite une
conversion explicite.
Essayez de retirer le `float64` ou `uint` des conversions dans l'exemple pour voir ce qui se passe.

.play basics/type-conversions.go

* L'inférence de type

Lors de la déclaration d'une variable sans préciser un type explicite (soit en utilisant la syntaxe `:=` ou `var`=`), le type de la variable est déduit de la valeur sur le côté droit.

Lorsque le côté droit de la déclaration est typé, la nouvelle variable est de ce même type :

	var i int
	j := i // j est un entier

Mais quand le côté droit contient une constante numérique non typée, la nouvelle variable peut être un `int`,`float64`, ou `complex128` en fonction de la précision de la constante :

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Essayez de changer la valeur initiale de `v` dans l'exemple et observez comment ce type est affecté.

.play basics/type-inference.go

* Constantes

Les constantes sont déclarées comme des variables, mais avec le mot-clé `const`.

Les constantes peuvent être un caractère, une chaîne, un booléen ou des valeurs numériques.

Les constantes ne peuvent pas être déclarées en utilisant la syntaxe `:=`.

.play basics/constants.go

* Constantes numériques

Les constantes numériques sont des _valeurs_ de haute précision.

Une constante non typée prend le type requis par son contexte.

Essayez aussi d'imprimer `needInt(Big)`.

(Un `int` peut stocker au maximum un entier de 64 bits et parfois moins.)

.play basics/numeric-constants.go

* Félicitations !

Vous avez terminé cette leçon !

Vous pouvez revenir à la liste des [[/list][modules]] pour trouver ce qu'il faut apprendre à côté, ou continuer avec la [[javascript:click('.next-page')][leçon suivante]].
