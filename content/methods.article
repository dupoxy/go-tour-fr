Méthodes et interfaces
Cette leçon couvre les méthodes et les interfaces, les constructions qui définissent des objets et leur comportement.

Les auteurs de Go
http://golang.org

* Méthodes

Go n'a pas  de classes. Cependant, vous pouvez définir des méthodes sur les types struct.

Le _method_receiver_ apparaît dans sa propre liste d'arguments entre le mot clé `func` et le nom de la méthode.

.play methods/methods.go

* Méthodes continué

Vous pouvez déclarer une méthode sur _n'importe_quel_ type qui est déclaré dans votre paquet, et pas seulement sur ​​les types struct.

Cependant, vous ne pouvez pas définir une méthode sur un type d'un autre paquet (y compris les types intégrés)

.play methods/methods-continued.go

* Méthodes avec des récepteurs de pointeur

Les méthodes peuvent être associées à un type nommé ou un pointeur vers un type nommé.

Nous venons de voir deux méthodes `Abs`. Un sur le `*Vertex` type pointeur et l'autre sur le `MyFloat` type valeur.

Il y a deux raisons d'utiliser un récepteur de pointeur. Tout d'abord, pour éviter de copier la valeur à chaque appel de la méthode (plus efficace si le type de valeur est une grande struct). En second lieu, de sorte que le procédé peut modifier la valeur de ce que sa pointe vers le récepteur.

Essayez de modifier les déclarations des méthodes `Abs` et `Scale`  en utilisant `Vertex` comme récepteur, au lieu de `*Vertex`.

La méthode `Scale` n'a aucun effet lorsque `v` est un `Vertex`. `Scale` mute `v`. Lorsque `v` est de type d'une valeur  (non-pointeur), la méthode voit une copie de `Vertex` et ne peut pas muter la valeur d'origine.

`Abs` fonctionne de toute façon. Elle lit que `v`. Ce n'est pas grave si elle est en train de lire la valeur d'origine (via un pointeur) ou une copie de cette valeur.

.play methods/methods-with-pointer-receivers.go

* Interfaces

Un type d'interface est définie par un ensemble de méthodes.

Une valeur de type d'interface peut contenir n'importe quelle valeur qui implémente ces méthodes.

*Note:* Il y a une erreur dans le code d'exemple sur la ligne 22.
`Vertex` (le type de valeur) ne satisfait pas `Abser` parce que
la méthode `Abs` est définie uniquement sur `*Vertex` (le type de pointeur).

.play methods/interfaces.go

* Les interfaces sont satisfaits implicitement

Un type implémente une interface en mettant en œuvre les méthodes.
Il n'y a aucune déclaration explicite d'intention; pas de mot-clé "implements".

Les interfaces implicites découple les paquets d'implémentation des paquets qui définissent les interfaces: aucun ne dépend de l'autre.

Il encourage également la définition précises des interfaces, parce que vous n'avez pas à trouver chaque mise en œuvre et l'étiqueter avec le nom de la nouvelle interface.

[[http://golang.org/pkg/io/][le Paquet io]] definis `Reader` et `Writer`; pour vous.

.play methods/interfaces-are-satisfied-implicitly.go

* Stringers

L'une des interfaces les plus répandues est [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] défini par le paquet [[//golang.org/pkg/fmt /][`fmt`]].

	type Stringer struct {
		String() string
	}

Un `Stringer` est un type qui peut se décrire comme une chaîne. Le paquet `fmt`
(et bien d'autres) recherche cette interface pour imprimer les valeurs.

.play methods/stringer.go

* Exercice: Stringer

Faire que le type `IPAddr` implémente `fmt.Stringer` pour imprimer l'adresse en 
un quad en pointillés. 

Par exemple, `IPAddr{1,`2,`3,`4}` devrait s'imprimer comme `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Erreurs

les programmes Go expriment l'état d'erreur avec les valeurs de `error`.

Le type de `error` est une interface intégrée similaire à `fmt.Stringer`:

	type error interface {
		Error() string
	}

(Comme `fmt.Stringer`, le paquet `fmt` recherche l'interface `error` lors de l'impression des valeurs.)

Les fonctions renvoient souvent une valeur `error`, et le code appelant doit gérer les erreurs 
en testant si l'erreur est égale à `nil`. 

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("ne peut pas convertir un nombre: %v\n", err)
	}
	fmt.Println("entier converti:", i)

Une `error` nul dénote le succès; une `error` non-nul dénote l'échec.

.play methods/errors.go

* Exercice: erreurs

Copiez la fonction de votre `Sqrt` des exercices antérieurs et la modifier pour retourner une valeur `error`.

`Sqrt` doit retourner une valeur d'erreur non-nulle quand on lui donne un nombre négatif, car il ne supporte pas les nombres complexes.

Créer un nouveau type

	type ErrNegativeSqrt float64

et en faire une `error` en lui donnant une

	func (e ErrNegativeSqrt) Error() string

méthode telle que `ErrNegativeSqrt(-2).Error()` renvoie `"cannot`Sqrt`negative`number:`-2"`.

*Note:* un appel à `fmt.Sprint(e)` à l'intérieur de la méthode `Error` enverra le programme dans une boucle infinie. Vous pouvez éviter cela en convertissant `e` en premier: `fmt.Sprint(float64(e))`. Pourquoi?

Changer la fonction `Sqrt` pour retourner une valeur `ErrNegativeSqrt` quand un nombre négatif est donné.

.play methods/exercise-errors.go

* Lecteurs (Readers)

Le paquet `io` spécifie l'interface `io.Reader`,
qui représente la fin de lecture d'un flux de données.

La bibliothèque standard de Go contient [[http://golang.org/search?q=Read#Global][plusieurs implémentations]] de ces interfaces, y compris les fichiers, les connexions réseau, les compresseurs, les chiffrements, et d'autres.

L'interface `io.Reader` a une méthode `Read`:

	func (T) Read(b []byte) (n int, err error)

`Read` remplit la tranche d'octets donné avec des données et renvoie le nombre d'octets
peuplé et une valeur d'erreur. Il renvoie une erreur `io.EOF` lorsque le flux
se termine.

L'exemple de code crée un
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]].
et consomme sa sortie 8 octets à la fois.

.play methods/reader.go

* Exercice: lecteurs

Mettre en place un type `Reader` qui émet un flux infini de caractères ASCII
`'A'`.

.play methods/exercise-reader.go

* Exercice: rot13Reader

Un modèle commun est un [[http://golang.org/pkg/io/#Reader][io.Reader]] qui enveloppe une autre `io.Reader`, modifiant le flux d'une certaine façon.

Par exemple, la fonction [[http://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] prend un `io.Reader` (un flux de données compressées) et renvoie un `*gzip.Reader` qui met également en œuvre `io.Reader` (un flux de données décompressées).

Mettre en place un `rot13Reader` qui implémente `io.Reader` et lit un `io.Reader`, modifiant le flux en appliquant la substitution [[http://en.wikipedia.org/wiki/ROT13][rot13]] de chiffrement à tous les caractères alphabétiques.

Le type `rot13Reader` est fourni pour vous.
Faites un `io.Reader` en mettant en œuvre sa méthode`Read`.

.play methods/exercise-rot-reader.go

* Serveurs Web

[[http://golang.org/pkg/net/http/][Paquet http]] sert les requêtes HTTP à l'aide de n'importe quelle valeur qui implémente `http.Handler`:

	package http
	
	type Handler interface {
		ServeHTTP(w ResponseWriter, r *Request)
	}

Dans cet exemple, le type `Hello` implémente `http.Handler`.

Visitez [[http://localhost:4000/][http://localhost:4000/]] pour voir l'annonce.

#appengine: *Note:* Cet exemple ne fonctionnera pas si le tour est sur le Web
#appengine: interface. Pour essayer d'écrire des serveurs Web vous souhaiterez peut-être
#appengine: [[http://golang.org/doc/install/][Installer Go]].

.play methods/web-servers.go

* Exercice: gestionnaires HTTP

Mettre en œuvre les types suivants et définir des méthodes ServeHTTP sur eux. Inscrivez-vous pour gérer des chemins spécifiques à votre serveur web.

	type String string

	type Struct struct {
		Greeting string
		Punct    string
		Who      string
	}

Par exemple, vous devriez être capable d'enregistrer des gestionnaires à l'aide de:

	http.Handle("/string", String("I'm a frayed knot."))
	http.Handle("/struct", &Struct{"Hello", ":", "Gophers!"})

#appengine: *Note:* Cet exemple ne fonctionnera pas via l'interface utilisateur du tour sur le web.
#appengine: Pour essayer l'écriture, des serveurs Web, vous voudrez peut-être
#appengine: [[http://golang.org/doc/install/][Installer Go]].

.play methods/exercise-http-handlers.go

* Images

[[http://golang.org/pkg/image/#Image][Package image]] définit l'interface `Image`:

	package image
	
	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Note*: la valeur de retour `Rectangle` de la méthode `Bounds` est en fait une 
[[http://golang.org/pkg/image/#Rectangle][`image.Rectangle`]], comme le 
déclaration est à l'intérieur du paquet `image`.

(Voir [[http://golang.org/pkg/image/#Image][la documentation]] pour tous les détails.)

Les types `color.Color` et `color.Model` sont également des interfaces, mais nous allons l'ignorer en utilisant les implémentations prédéfinies `color.RGBA` et `color.RGBAModel`. Ces interfaces et les types sont spécifiés par le [[http://golang.org/pkg/image/color/][paquet image/color]]

.play methods/images.go

* Exercice: Images

Souvenez-vous du générateur d'images que vous avez écrit plus tôt? Écrivons un autre, mais cette fois, il retournera une implémentation de `image.Image` au lieu d'une tranche de données.

Définissez votre propre type `Image`, mettre en œuvre [[http://golang.org/pkg/image/#Image][les méthodes nécessaires]], et appeler `pic.ShowImage`.

`Bounds` devraient retourner un `image.Rect(0,`0,`w,`h)`.

`ColorModel` doit retourner `color.RGBAModel`.

`At` doit retourner une couleur, la valeur `v` au dernier générateur d'image correspond à `color.RGBA{v,`v,`255,`255}` dans celui-ci.

.play methods/exercise-images.go

* Félicitations!

Vous avez terminé cette leçon!

Vous pouvez revenir à la liste des [[/list][modules]] pour trouver ce qu'il faut apprendre à côté, ou continuer avec la [[javascript:click('.next-page')][Leçon suivante]]. lesson]].
